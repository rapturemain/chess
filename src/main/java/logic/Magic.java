package logic;

import javafx.beans.property.SimpleIntegerProperty;

public class Magic {
    private static class MagicSquare {
        MagicSquare(int index, enums.PieceType type) {
            if (type == enums.PieceType.ROOK) {
                figureMoves = Magic.RookMoves[index];
                magic = Magic.RookMagics[index];
                shift = Magic.RookShifts[index];
                allMoves = new long[(int) Math.pow(2, shift)];
            }
            else {
                figureMoves = Magic.BishopMoves[index];
                magic = Magic.BishopMagics[index];
                shift = Magic.BishopShifts[index];
                allMoves = new long[(int) Math.pow(2, shift)];
            }
        }

        final long[] allMoves;
        final long figureMoves;
        final long magic;
        final int shift;
    }

    private static final MagicSquare[] MagicRook = new MagicSquare[64];
    private static final MagicSquare[] MagicBishop = new MagicSquare[64];

    public static void init() {
        for (int i = 0; i < 64; i++) {
            MagicRook[i] = new MagicSquare(i, enums.PieceType.ROOK);
            MagicBishop[i] = new MagicSquare(i, enums.PieceType.BISHOP);
            initMagicSquare(0, MagicRook[i], i, i, 0, new enums.Direction[]
                    {enums.Direction.NORTH, enums.Direction.EAST, enums.Direction.SOUTH, enums.Direction.WEST});
            initMagicSquare(0, MagicBishop[i], i, i, 0, new enums.Direction[]
                    {enums.Direction.NORTHEATS, enums.Direction.SOUTHEAST,
                            enums.Direction.SOUTHWEST, enums.Direction.NORTHWEST});
        }
    }

    public static long getPseudoLegalMoves(long figures, int index, enums.PieceType type) {
        return
                type == enums.PieceType.ROOK ?
                MagicRook[index].allMoves[(int) ((((figures & (~(0b1L << index)) & Magic.RookMoves[index])
                        & MagicRook[index].figureMoves)
                        * MagicRook[index].magic) >>> (64 - MagicRook[index].shift))]

                : type == enums.PieceType.BISHOP ?
                MagicBishop[index].allMoves[(int) ((((figures & (~(0b1L << index)) & Magic.BishopMoves[index])
                        & MagicBishop[index].figureMoves)
                        * MagicBishop[index].magic) >>> (64 - MagicBishop[index].shift))]

                : type == enums.PieceType.QUEEN ?
                (getPseudoLegalMoves(figures, index, enums.PieceType.ROOK) |
                        getPseudoLegalMoves(figures, index, enums.PieceType.BISHOP)) : 0;

    }

    /**
     * Magic bitboard moves filler.
     * Uses recursive loop to generate each possible blockers variation.
     * @param collisionMap - which blockers variation should we consider in this recursive
     * @param m - moves of which MagicSquare will be filled
     * @param fromSquare - index of current MagicSquare position
     * @param currentSquare - last looked square
     * @param currentDirection - which direction should getNextSquare() check first
     * @param directions - directions for move
     */
    private static void initMagicSquare(long collisionMap, MagicSquare m, int fromSquare, int currentSquare, int currentDirection, enums.Direction[] directions) {
        SimpleIntegerProperty currentDirectionProperty = new SimpleIntegerProperty(currentDirection);
        currentSquare = getNextSquare(fromSquare, currentSquare, currentDirectionProperty, directions);
        if (currentSquare == -1) {
            int index = (int) (((collisionMap & m.figureMoves) * m.magic) >>> 64 - m.shift);
            long possibleAttacks = generateMoves(collisionMap, fromSquare, directions);
            m.allMoves[index] = possibleAttacks;
            return;
        }
        // Consider 2 new positions (empty or not)
        // If 1
        collisionMap |= 0b1L << currentSquare;
        initMagicSquare(collisionMap, m, fromSquare, currentSquare, currentDirectionProperty.getValue(), directions);
        // If 0
        collisionMap &= ~(0b1L << currentSquare);
        initMagicSquare(collisionMap, m, fromSquare, currentSquare, currentDirectionProperty.getValue(), directions);
    }

    /**
     * Gives the next square for initMagicSquare() which led to new blockers variation.
     * @param fromSquare - MagicSquare position
     * @param currentSquare - last looked square
     * @param currentDirectionProperty - which direction should we check first
     * @param directions - directions for move
     * @return - index of next square to consider a new blockers variation.
     */
    private static int getNextSquare(int fromSquare, int currentSquare, SimpleIntegerProperty currentDirectionProperty, enums.Direction[] directions) {
        for (; currentDirectionProperty.getValue() < 4;
             currentDirectionProperty.set(currentDirectionProperty.getValue() + 1)) {
            int shiftX = directions[currentDirectionProperty.getValue()].x;
            int shiftY = directions[currentDirectionProperty.getValue()].y;
            int currentX = currentSquare % 8 + shiftX;
            int currentY = currentSquare / 8 + shiftY;
            if ((shiftX == 0 || (currentX > 0 && currentX < 7)) && (shiftY == 0 || (currentY > 0 && currentY < 7))) {
                return currentY * 8 + currentX;
            }
            currentSquare = fromSquare;
        }
        return -1;
    }

    private static long generateMoves(long collisionMap, int fromSquare, enums.Direction[] directions) {
        long moves = 0;
        for (int direction = 0; direction < 4; direction++) {
            int shiftX = directions[direction].x;
            int shiftY = directions[direction].y;
            int currentX = fromSquare % 8 + shiftX;
            int currentY = fromSquare / 8 + shiftY;
            while (currentX >= 0 && currentY >= 0 && currentX < 8 && currentY < 8) {
                long squareBit = 0b1L << (currentY * 8 + currentX);
                moves |= squareBit;
                if ((squareBit & collisionMap) != 0) {
                    break;
                }
                currentX += shiftX;
                currentY += shiftY;
            }
        }
        return moves;
    }


    /**
     * Constants:
     * Optimal RookMoves and BishopMoves (without end rays bits)
     * Magic numbers and Shift tables for calculating index
     */
    private static final long[] RookMoves = new long[] {
            0b0000000000000001000000010000000100000001000000010000000101111110L,
            0b0000000000000010000000100000001000000010000000100000001001111100L,
            0b0000000000000100000001000000010000000100000001000000010001111010L,
            0b0000000000001000000010000000100000001000000010000000100001110110L,
            0b0000000000010000000100000001000000010000000100000001000001101110L,
            0b0000000000100000001000000010000000100000001000000010000001011110L,
            0b0000000001000000010000000100000001000000010000000100000000111110L,
            0b0000000010000000100000001000000010000000100000001000000001111110L,
            0b0000000000000001000000010000000100000001000000010111111000000000L,
            0b0000000000000010000000100000001000000010000000100111110000000000L,
            0b0000000000000100000001000000010000000100000001000111101000000000L,
            0b0000000000001000000010000000100000001000000010000111011000000000L,
            0b0000000000010000000100000001000000010000000100000110111000000000L,
            0b0000000000100000001000000010000000100000001000000101111000000000L,
            0b0000000001000000010000000100000001000000010000000011111000000000L,
            0b0000000010000000100000001000000010000000100000000111111000000000L,
            0b0000000000000001000000010000000100000001011111100000000100000000L,
            0b0000000000000010000000100000001000000010011111000000001000000000L,
            0b0000000000000100000001000000010000000100011110100000010000000000L,
            0b0000000000001000000010000000100000001000011101100000100000000000L,
            0b0000000000010000000100000001000000010000011011100001000000000000L,
            0b0000000000100000001000000010000000100000010111100010000000000000L,
            0b0000000001000000010000000100000001000000001111100100000000000000L,
            0b0000000010000000100000001000000010000000011111101000000000000000L,
            0b0000000000000001000000010000000101111110000000010000000100000000L,
            0b0000000000000010000000100000001001111100000000100000001000000000L,
            0b0000000000000100000001000000010001111010000001000000010000000000L,
            0b0000000000001000000010000000100001110110000010000000100000000000L,
            0b0000000000010000000100000001000001101110000100000001000000000000L,
            0b0000000000100000001000000010000001011110001000000010000000000000L,
            0b0000000001000000010000000100000000111110010000000100000000000000L,
            0b0000000010000000100000001000000001111110100000001000000000000000L,
            0b0000000000000001000000010111111000000001000000010000000100000000L,
            0b0000000000000010000000100111110000000010000000100000001000000000L,
            0b0000000000000100000001000111101000000100000001000000010000000000L,
            0b0000000000001000000010000111011000001000000010000000100000000000L,
            0b0000000000010000000100000110111000010000000100000001000000000000L,
            0b0000000000100000001000000101111000100000001000000010000000000000L,
            0b0000000001000000010000000011111001000000010000000100000000000000L,
            0b0000000010000000100000000111111010000000100000001000000000000000L,
            0b0000000000000001011111100000000100000001000000010000000100000000L,
            0b0000000000000010011111000000001000000010000000100000001000000000L,
            0b0000000000000100011110100000010000000100000001000000010000000000L,
            0b0000000000001000011101100000100000001000000010000000100000000000L,
            0b0000000000010000011011100001000000010000000100000001000000000000L,
            0b0000000000100000010111100010000000100000001000000010000000000000L,
            0b0000000001000000001111100100000001000000010000000100000000000000L,
            0b0000000010000000011111101000000010000000100000001000000000000000L,
            0b0000000001111110000000010000000100000001000000010000000100000000L,
            0b0000000001111100000000100000001000000010000000100000001000000000L,
            0b0000000001111010000001000000010000000100000001000000010000000000L,
            0b0000000001110110000010000000100000001000000010000000100000000000L,
            0b0000000001101110000100000001000000010000000100000001000000000000L,
            0b0000000001011110001000000010000000100000001000000010000000000000L,
            0b0000000000111110010000000100000001000000010000000100000000000000L,
            0b0000000001111110100000001000000010000000100000001000000000000000L,
            0b0111111000000001000000010000000100000001000000010000000100000000L,
            0b0111110000000010000000100000001000000010000000100000001000000000L,
            0b0111101000000100000001000000010000000100000001000000010000000000L,
            0b0111011000001000000010000000100000001000000010000000100000000000L,
            0b0110111000010000000100000001000000010000000100000001000000000000L,
            0b0101111000100000001000000010000000100000001000000010000000000000L,
            0b0011111001000000010000000100000001000000010000000100000000000000L,
            0b0111111010000000100000001000000010000000100000001000000000000000L
    };

   private static long BishopMoves[] = new long[] {
            0b0000000001000000001000000001000000001000000001000000001000000000L,
            0b0000000000000000010000000010000000010000000010000000010000000000L,
            0b0000000000000000000000000100000000100000000100000000101000000000L,
            0b0000000000000000000000000000000001000000001000100001010000000000L,
            0b0000000000000000000000000000000000000010010001000010100000000000L,
            0b0000000000000000000000000000001000000100000010000101000000000000L,
            0b0000000000000000000000100000010000001000000100000010000000000000L,
            0b0000000000000010000001000000100000010000001000000100000000000000L,
            0b0000000000100000000100000000100000000100000000100000000000000000L,
            0b0000000001000000001000000001000000001000000001000000000000000000L,
            0b0000000000000000010000000010000000010000000010100000000000000000L,
            0b0000000000000000000000000100000000100010000101000000000000000000L,
            0b0000000000000000000000000000001001000100001010000000000000000000L,
            0b0000000000000000000000100000010000001000010100000000000000000000L,
            0b0000000000000010000001000000100000010000001000000000000000000000L,
            0b0000000000000100000010000001000000100000010000000000000000000000L,
            0b0000000000010000000010000000010000000010000000000000001000000000L,
            0b0000000000100000000100000000100000000100000000000000010000000000L,
            0b0000000001000000001000000001000000001010000000000000101000000000L,
            0b0000000000000000010000000010001000010100000000000001010000000000L,
            0b0000000000000000000000100100010000101000000000000010100000000000L,
            0b0000000000000010000001000000100001010000000000000101000000000000L,
            0b0000000000000100000010000001000000100000000000000010000000000000L,
            0b0000000000001000000100000010000001000000000000000100000000000000L,
            0b0000000000001000000001000000001000000000000000100000010000000000L,
            0b0000000000010000000010000000010000000000000001000000100000000000L,
            0b0000000000100000000100000000101000000000000010100001000000000000L,
            0b0000000001000000001000100001010000000000000101000010001000000000L,
            0b0000000000000010010001000010100000000000001010000100010000000000L,
            0b0000000000000100000010000101000000000000010100000000100000000000L,
            0b0000000000001000000100000010000000000000001000000001000000000000L,
            0b0000000000010000001000000100000000000000010000000010000000000000L,
            0b0000000000000100000000100000000000000010000001000000100000000000L,
            0b0000000000001000000001000000000000000100000010000001000000000000L,
            0b0000000000010000000010100000000000001010000100000010000000000000L,
            0b0000000000100010000101000000000000010100001000100100000000000000L,
            0b0000000001000100001010000000000000101000010001000000001000000000L,
            0b0000000000001000010100000000000001010000000010000000010000000000L,
            0b0000000000010000001000000000000000100000000100000000100000000000L,
            0b0000000000100000010000000000000001000000001000000001000000000000L,
            0b0000000000000010000000000000001000000100000010000001000000000000L,
            0b0000000000000100000000000000010000001000000100000010000000000000L,
            0b0000000000001010000000000000101000010000001000000100000000000000L,
            0b0000000000010100000000000001010000100010010000000000000000000000L,
            0b0000000000101000000000000010100001000100000000100000000000000000L,
            0b0000000001010000000000000101000000001000000001000000001000000000L,
            0b0000000000100000000000000010000000010000000010000000010000000000L,
            0b0000000001000000000000000100000000100000000100000000100000000000L,
            0b0000000000000000000000100000010000001000000100000010000000000000L,
            0b0000000000000000000001000000100000010000001000000100000000000000L,
            0b0000000000000000000010100001000000100000010000000000000000000000L,
            0b0000000000000000000101000010001001000000000000000000000000000000L,
            0b0000000000000000001010000100010000000010000000000000000000000000L,
            0b0000000000000000010100000000100000000100000000100000000000000000L,
            0b0000000000000000001000000001000000001000000001000000001000000000L,
            0b0000000000000000010000000010000000010000000010000000010000000000L,
            0b0000000000000010000001000000100000010000001000000100000000000000L,
            0b0000000000000100000010000001000000100000010000000000000000000000L,
            0b0000000000001010000100000010000001000000000000000000000000000000L,
            0b0000000000010100001000100100000000000000000000000000000000000000L,
            0b0000000000101000010001000000001000000000000000000000000000000000L,
            0b0000000001010000000010000000010000000010000000000000000000000000L,
            0b0000000000100000000100000000100000000100000000100000000000000000L,
            0b0000000001000000001000000001000000001000000001000000001000000000L
    };

    private static long[] RookMagics = new long[] {
            0x11800040001481a0L,
            0x2040400010002000L,
            0xa280200308801000L,
            0x100082005021000L,
            0x280280080040006L,
            0x200080104100200L,
            0xc00040221100088L,
            0xe00072200408c01L,
            0x2002045008600L,
            0xa410804000200089L,
            0x4081002000401102L,
            0x2000c20420010L,
            0x800800400080080L,
            0x40060010041a0009L,
            0x441004442000100L,
            0x462800080004900L,
            0x80004020004001L,
            0x1840420021021081L,
            0x8020004010004800L,
            0x940220008420010L,
            0x2210808008000400L,
            0x24808002000400L,
            0x803604001019a802L,
            0x520000440081L,
            0x802080004000L,
            0x1200810500400024L,
            0x8000100080802000L,
            0x2008080080100480L,
            0x8000404002040L,
            0xc012040801104020L,
            0xc015000900240200L,
            0x20040200208041L,
            0x1080004000802080L,
            0x400081002110L,
            0x30002000808010L,
            0x2000100080800800L,
            0x2c0800400800800L,
            0x1004800400800200L,
            0x818804000210L,
            0x340082000a45L,
            0x8520400020818000L,
            0x2008900460020L,
            0x100020008080L,
            0x601001000a30009L,
            0xc001000408010010L,
            0x2040002008080L,
            0x11008218018c0030L,
            0x20c0080620011L,
            0x400080002080L,
            0x8810040002500L,
            0x400801000200080L,
            0x2402801000080480L,
            0x204040280080080L,
            0x31044090200801L,
            0x40c10830020400L,
            0x442800100004080L,
            0x10080002d005041L,
            0x134302820010a2c2L,
            0x6202001080200842L,
            0x1820041000210009L,
            0x1002001008210402L,
            0x2000108100402L,
            0x10310090a00b824L,
            0x800040100944822L
    };

    private static long[] BishopMagics = new long[]{
            0xc085080200420200L,
            0x60014902028010L,
            0x401240100c201L,
            0x580ca104020080L,
            0x8434052000230010L,
            0x102080208820420L,
            0x2188410410403024L,
            0x40120805282800L,
            0x4420410888208083L,
            0x1049494040560L,
            0x6090100400842200L,
            0x1000090405002001L,
            0x48044030808c409L,
            0x20802080384L,
            0x2012008401084008L,
            0x9741088200826030L,
            0x822000400204c100L,
            0x14806004248220L,
            0x30200101020090L,
            0x148150082004004L,
            0x6020402112104L,
            0x4001000290080d22L,
            0x2029100900400L,
            0x804203145080880L,
            0x60a10048020440L,
            0xc08080b20028081L,
            0x1009001420c0410L,
            0x101004004040002L,
            0x1004405014000L,
            0x10029a0021005200L,
            0x4002308000480800L,
            0x301025015004800L,
            0x2402304004108200L,
            0x480110c802220800L,
            0x2004482801300741L,
            0x400400820a60200L,
            0x410040040040L,
            0x2828080020011000L,
            0x4008020050040110L,
            0x8202022026220089L,
            0x204092050200808L,
            0x404010802400812L,
            0x422002088009040L,
            0x180604202002020L,
            0x400109008200L,
            0x2420042000104L,
            0x40902089c008208L,
            0x4001021400420100L,
            0x484410082009L,
            0x2002051108125200L,
            0x22e4044108050L,
            0x800020880042L,
            0xb2020010021204a4L,
            0x2442100200802dL,
            0x10100401c4040000L,
            0x2004a48200c828L,
            0x9090082014000L,
            0x800008088011040L,
            0x4000000a0900b808L,
            0x900420000420208L,
            0x4040104104L,
            0x120208c190820080L,
            0x4000102042040840L,
            0x8002421001010100L
    };

    private static int RookShifts[] = new int[]{
            12, 11, 11, 11, 11, 11, 11, 12,
            11, 10, 10, 10, 10, 10, 10, 11,
            11, 10, 10, 10, 10, 10, 10, 11,
            11, 10, 10, 10, 10, 10, 10, 11,
            11, 10, 10, 10, 10, 10, 10, 11,
            11, 10, 10, 10, 10, 10, 10, 11,
            11, 10, 10, 10, 10, 10, 10, 11,
            12, 11, 11, 11, 11, 11, 11, 12,
    };

    private static int BishopShifts[] = new int[]{
            6, 5, 5, 5, 5, 5, 5, 6,
            5, 5, 5, 5, 5, 5, 5, 5,
            5, 5, 7, 7, 7, 7, 5, 5,
            5, 5, 7, 9, 9, 7, 5, 5,
            5, 5, 7, 9, 9, 7, 5, 5,
            5, 5, 7, 7, 7, 7, 5, 5,
            5, 5, 5, 5, 5, 5, 5, 5,
            6, 5, 5, 5, 5, 5, 5, 6,
    };
}
